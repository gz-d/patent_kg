{"lc": 1, "type": "constructor", "id": ["langchain", "schema", "document", "Document"], "kwargs": {"metadata": {"source": "/home/guanzhideng145/research/ip_portal/patent_kg/patents/130-US8,019,804(active).pdf"}, "page_content": "-continued\n\n180 72 54 18 \u5168 72 36 18 18 Fe 36 18 18 18 18 18 18 0\n\nThis demonstrates that even if most of the coefficients of F are large, SSD(S,C) can be zero if |F-F\\|,2=0. The example indicates that the elements of D or F are not directly related to the SSD(S,C) which is determined by the quantization error. That is why the rate-distortion performance of SAD-based and SATD-based cost functions, which do not take account of the quantization error, is sub-optimum.\n\nThe relationship between the DCT and the ICT can be expressed as:\n\nF=DCT(D)-CDCF@) Ojon ICID) Qj =F BLATION 15)\n\nwhere, Cris called ICT core matrices, Qy,,,, is called scal- ing factors and F* is the ICT transformed block. The symbol \u5168 indicates the operatorthat eachelement of CDCZ (OrEY) is multiplied by the scaling factor in the corresponding posi- tion. The forward core and scale transform matrices are defined as:\n\nOn the other hand, the transform-domain SSD(FF) can be used to reduce the number of computations required for the rate distortion cost calculation; i.e. the rate distortion can be calculated using the equation Jg,-SSD(FP)44:R, which allows the inverse DCT transform and image block recon- struction to be avoided, Another advantage of using this trans- form-domain SSD(F, F) is that, ignoring the clipping function applied in the practical computation, there should not be any performance degradation in terms of both coding efficiency and reconstructed image distortion as SSD(F.F) and SSD(S, C) are theoretically equivalent.\n\nab ab eT? > 1 1 1 1 ab B ab B 21-14 TPT CT pn PEEL ae, abt 1 -2 2 -1 \u548c \u4eba \u4eba ab \u8aaa \u6240 24\u00b020 4\n\nIn H.264/AVC, however, a DCT is not used as the image transform. Rather an integer image transform, the Integer Cosine Transform (ICT), is used instead to reduce the com- putational complexity. This is discussed below. Ill. Fast Sum of the Squared Difference Computation 3.1 Review of Integer Cosine Transform in H.264", "type": "Document"}}