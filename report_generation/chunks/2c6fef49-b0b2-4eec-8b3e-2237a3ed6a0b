{"lc": 1, "type": "constructor", "id": ["langchain", "schema", "document", "Document"], "kwargs": {"metadata": {"source": "/home/guanzhideng145/research/ip_portal/patent_kg/patents/1235_US20240143524A1.pdf"}, "page_content": "[0046] Preferably, software/hardware co-design may be a System on a Chip (SoC) design involving software design in microprocessor such as ARM and RISC-V, and hardware design in FPGA and ASIC. By using software/hardware co-design method, the system owns the advantages of both platforms. Specifically, a parallel and pipelined architecture can be explored to speed up the algorithm, while the remaining serial computation and control system can be implemented in software in a short development time. Furthermore, the limited hardware resources in FPGAs make the software/hardware co-design a good choice for efficient system implementations.\n\n[0047] For example, software/hardware co-designs may be implemented on NIST round-2 Dilithium, including on ZYNQ-7020 platform with ARM Cortex-A9 processor, and with software on RISC-V processor and hardware on ASIC. In an alternative example, hardware architecture may be used for NTT, point-wise addition/multiplication, and SHA-3 Keccak functions. However, the speed improvement was insignificant because the Keccak related samplers were not implemented in the hardware, which resulted in a large data transmission overhead.\n\n[0048] In yet another alternative example, hardware accel- erators including sampling with SHA-3 based Pseudo-Ran- dom Number Generation (PRNG) and NIT may be designed to adapt the computation of several lattice-based cryptosystems. However, if the system lacks a dedicate acceleration for the time-consuming polynomial matrix- vector multiplication, a longer computation time of the Dilithium may be achieved.", "type": "Document"}}